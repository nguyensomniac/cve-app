import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import moment from 'moment';

import styles from './dash-viz.css';

import FilterBar from '../../components/filter-bar/filter-bar';
import DashMap from '../../components/dash-map/dash-map';
import SupportCharts from '../../components/support-charts/support-charts';

import { setActiveItem, clearActiveItem } from '../../action-creators/viz-actions';

class DashViz extends Component {
  static propTypes = {
    articles: PropTypes.array,
    regions: PropTypes.object,
    initialZipCounts: PropTypes.object,
    activeItem: PropTypes.object,
    setZip: PropTypes.func,
    clearZip: PropTypes.func
  }

  constructor(props) {
    super(props);
    this.state = {
      filters: {
        time: '',
        category: ''
      },
      filteredData: [],
      currentZipCounts: {}
    }
  }

  // Changes filter state.
  onFilterValueChange = (type, value) => {
    let newFilters = {
      ...this.state.filters
    }
    newFilters[type] = value;
    this.setState({
      filters: newFilters
    })
  }

  // get a subset of this.props.articles, based on
  // filters in state.
  computeFilteredData() {
    let newData = this.props.articles;
    let newZipCounts = {
      ...this.props.initialZipCounts
    };
    if (this.state.filters.category) {
      newData = newData.filter((article) => {
        for (let i = 0; i < article.Sections.length; i++) {
          if(article.Sections[i].toUpperCase().indexOf(this.state.filters.category.toUpperCase()) !== -1) {
            return true;
          }
        }
        newZipCounts[article.ZIP] -= 1;
        return false;
      })
    }
    if (this.state.filters.time) {
      const LAST_DATE = "2017-04-17T13:15:00-07:00";
      newData = newData.filter((article) => {
        const interval = moment(LAST_DATE).diff(moment(article["Date"]));
        const numDays = moment.duration(interval).asDays();
        let inSet;
        switch (this.state.filters.time) {
          case 'day':
            inSet = (numDays < 1);
            break;
          case 'week':
            inSet = (numDays < 7);
            break;
          case 'month':
            inSet = (numDays < 30);
            break;
          default:
            inSet = true;
            break;
        }
        if (!inSet) {
          newZipCounts[article.ZIP] -= 1;
        }
        return inSet;
      })
    }
    this.setState({
      filteredData: newData,
      currentZipCounts: newZipCounts
    })
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevProps.initialZipCounts !== this.props.initialZipCounts) {
      this.setState({
        currentZipCounts: this.props.initialZipCounts
      });
    }
    if (prevProps.articles !== this.props.articles ||
      prevState.filters.time !== this.state.filters.time ||
      prevState.filters.category !== this.state.filters.category) {
      this.computeFilteredData();
    }
  }

  render() {
    return (
      <div className={styles.container}>
        <FilterBar onValueChange={this.onFilterValueChange}/>
        <div className={styles.vizContainer}>
          <div className={styles.mapContainer}>
            <DashMap
              className={styles.mapContainer}
              bounds={[
                [37.898362, -122.338272],
                [37.808154, -122.213892]
              ]}
              articles={this.state.filteredData}
              regions={this.props.regions}
              currentZipCounts={this.state.currentZipCounts}
              onClickRegion={this.props.setZip}
              onReleaseRegion={this.props.clearZip}
              activeItem={this.props.activeItem}
            />
          </div>
          <div className={styles.chartContainer}>
            <SupportCharts
              className={styles.chartContainer}
              articles={this.props.articles}
              activeItem={this.props.activeItem}
              initialZipCounts={this.props.initialZipCounts}
            />
          </div>
        </div>
      </div>
    )
  }
}

const mapStateToProps = (state) => {
  return {
    articles: state.articleData,
    regions: state.regionData,
    activeItem: state.activeItem,
    initialZipCounts: state.zipCounts
  }
}

const mapDispatchToProps = (dispatch) => {
  return {
    setZip: (item) => dispatch(setActiveItem(item)),
    clearZip: () => dispatch(clearActiveItem())
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(DashViz);
