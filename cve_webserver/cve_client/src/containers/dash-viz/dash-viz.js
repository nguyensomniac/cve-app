import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import moment from 'moment';

import styles from './dash-viz.css';

import FilterBar from '../../components/filter-bar/filter-bar';
import DashMap from '../../components/dash-map/dash-map';
import SupportCharts from '../../components/support-charts/support-charts';

import { setActiveItem, clearActiveItem } from '../../action-creators/viz-actions';

class DashViz extends Component {
  static propTypes = {
    articles: PropTypes.array,
    activeItem: PropTypes.object,
    onClickMarker: PropTypes.func
  }

  constructor(props) {
    super(props);
    this.state = {
      filters: {
        time: '',
        category: ''
      },
      filteredData: []
    }
  }

  // Changes filter state.
  onFilterValueChange = (type, value) => {
    let newFilters = {
      ...this.state.filters
    }
    newFilters[type] = value;
    this.setState({
      filters: newFilters
    })
  }

  // get a subset of this.props.articles, based on
  // filters in state.
  computeFilteredData() {
    let newData = this.props.articles;
    if (this.state.filters.category) {
      newData = newData.filter((article) => {
        for (let i = 0; i < article.Sections.length; i++) {
          if(article.Sections[i].toUpperCase().indexOf(this.state.filters.category.toUpperCase()) !== -1) {
            return true;
          }
        }
        return false;
      })
    }
    if (this.state.filters.time) {
      const LAST_DATE = "2017-04-17T13:15:00-07:00";
      newData = newData.filter((article) => {
        const interval = moment(LAST_DATE).diff(moment(article["Date"]));
        const numDays = moment.duration(interval).asDays();
        switch (this.state.filters.time) {
          case 'day':
            return (numDays < 1);
          case 'week':
            return (numDays < 7);
          case 'month':
            return (numDays < 30);
          default:
            return true;
        }
      })
    }
    this.setState({
      filteredData: newData
    })
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevProps.articles !== this.props.articles ||
      prevState.filters.time !== this.state.filters.time ||
      prevState.filters.category !== this.state.filters.category) {
      this.computeFilteredData();
    }
  }

  render() {
    return (
      <div className={styles.container}>
        <FilterBar onValueChange={this.onFilterValueChange}/>
        <div className={styles.vizContainer}>
          <div className={styles.mapContainer}>
            <DashMap
              className={styles.mapContainer}
              lon={-122.275}
              lat={37.861}
              zoom={11.6}
              articles={this.state.filteredData}
              regions={this.props.regions}
              onClickMarker={this.props.onClickMarker}
              onReleaseMarker={this.props.onReleaseMarker}
            />
          </div>
          <div className={styles.chartContainer}>
            <SupportCharts className={styles.chartContainer} articles={this.props.articles} activeItem={this.props.activeItem} />
          </div>
        </div>
      </div>
    )
  }
}

const mapStateToProps = (state) => {
  return {
    articles: state.articleData,
    regions: state.regionData,
    activeItem: state.activeItem
  }
}

const mapDispatchToProps = (dispatch) => {
  return {
    onClickMarker: (item) => dispatch(setActiveItem(item)),
    onReleaseMarker: () => dispatch(clearActiveItem())
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(DashViz);
