import React, { Component } from 'react';
import PropTypes from 'prop-types';

const ZingChart = require('zingchart-react').core;

// Data and styles
import styles from './support-charts.css';

class SupportCharts extends Component{

  static propTypes = {
    articles: PropTypes.array,
    activeItem: PropTypes.shape({
      ZIP: PropTypes.number
    })
  }

  constructor(props){
    super(props);

    this.state = {
      query: [],
      data: []
    }
    // query is a list of area codes that Lily would return
    // default is no area code which means show everything
  }

  componentWillReceiveProps(newProps) {
    // initial data trimming + obtain year and month
    let workableData = [];
    newProps.articles.forEach((item) =>{
      workableData.push({
        "Author":item["Author"],
        "Date":item["Date"].slice(0,10),
        "Month": this.toMonth(item["Date"].slice(5,7)),
        "Year": item["Date"].slice(0,4),
        "ID":item["ID"],
        "Latitude":item["Lat"],
        "Longitude":item["Lon"],
        "Location":item["Place"],
        "Title":item["Title"],
        "ZIP": item["ZIP"]
      });
    });
    this.setState({
      data: workableData
    })
  }

  toMonth(numberString){
    numberString = Number(numberString);
    return numberString;
  }

  articlesByArea(data){
    let countMap = {};
    data.forEach((item) => {
      if (item["ZIP"] === 'NA') {
        return;
      }
      if(item["ZIP"] in countMap){
        countMap[item["ZIP"]] += 1;
      }
      else{
        countMap[item["ZIP"]] = 1;
      }
    });
    // take the object and convert it to an array, so we can sort it
    let sortedCounts = Object.keys(countMap).map((zip) => {
      return {
        'name': zip,
        'count': countMap[zip]}
    });
    // sort in place, in descending order
    sortedCounts.sort((item1, item2) => {return (item1.count - item2.count)});
    sortedCounts = sortedCounts.filter((item) => (item.count >= 3));
    return sortedCounts;
  }

  articlesByMonth(data){
    let articlesByMonth = {};
    // "94704":[12, 23, 23, 24]
    data.forEach((item)=>{
      if (this.props.activeItem.ZIP && item["ZIP"] != this.props.activeItem.ZIP) { return; }
      if(item["ZIP"] in articlesByMonth){
        articlesByMonth[item["ZIP"]][item["Month"]-1]++;
      }
      else{
        articlesByMonth[item["ZIP"]] = [0,0,0,0];
      }
    });
    return articlesByMonth;
  }

  renderBarChartIfNeeded() {
    const articlesCount = this.articlesByArea(this.state.data);
    const areaCodeLabels = articlesCount.map((item) => item.name);
    const areaCodeValues = articlesCount.map((item) => item.count);
    const maxCount = Math.max.apply(null, areaCodeValues);
    const areaCodeText = articlesCount.map((item, i) => {
      return {
        text: (i == articlesCount.length - 1) ? `${item.count} articles` : item.count,
        hook: `node:plot=1,index=${i}`,
        color: (i == articlesCount.length - 1) ? 'white' : '#444444',
        offsetX: (i == articlesCount.length - 1) ? -35 : 8,
        textAlign: 'left'
      }
    });
    const barConfig = {
      "scale-x": {
        labels: areaCodeLabels,
        'items-overlap': true,
        tick: {
          visible: false
        }
      },
      "scale-y": {
        guide: {
          visible: false
        }
      },
      "plot": {
        "bar-width": "20px",
        "bar-space": "8px",
        stacked: true
      },
      labels: areaCodeText,
      plotarea: {
        margin: '0 dynamic'
      },
      type: "hbar",
      series : [
        {
          values : areaCodeValues,
          backgroundColor: '#628FFF'
        },
        { values : areaCodeValues.map(() => 0)}
      ]
    };
    return (
      <div className = "barChart">
        <p>Total articles published, by ZIP code</p>
        <ZingChart id="barChart" height="400px" width="100%" data={barConfig} />
      </div>
    )
  }

  render(){

    // configurations for the charts

    var articlesCount = this.articlesByArea(this.state.data);
    var articlesListByMonth = this.articlesByMonth(this.state.data);

    var AreaCodeLabels = articlesCount.map((item) => item.name);

    var MonthValues = [];
    AreaCodeLabels.forEach((item) => {
      MonthValues.push({ values: articlesListByMonth[item] });
    })



    var lineConfig = {
      "scale-x": {
        labels: ["January", "February", "March", "April"]
      },
      type: "line",
      series : MonthValues
    };

    return(
      <div>
        {this.renderBarChartIfNeeded()}
        <div className = "lineChart">
          <p>Articles covered by month in {this.props.activeItem.ZIP}</p>
          <ZingChart id="lineChart" height="250" width="100%" data={lineConfig} />
        </div>
      </div>
    );
  }
}

export default SupportCharts;



    // TODO:
    // retrieve default state to all so that a chart is visible - DONE
    // retrieve data for this default state - DONE
    // define labels + summarizing information at the top of the chart
    // Implement bar graphs for total number of articles so far
    // Implement line graphs for number of articles per pin code over time

    // TODO Manipulations:
    // Summative coverage across all areas by number of articles (bar graph)
    // Month-by-month coverage across all areas by number of articles (line graph)
    // Tool-tip at each data point showing the population of that area and the tag that is covered the most

    // On selection from Lily's map
      // Show population of area(s) - comparative bar graph representation
      // Show population breakdown (use census data)
      // Month by month coverage across those areas (line graph)
      // Month by month coverage for ONE area by categories covered
