import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { Map, TileLayer, CircleMarker, Popup } from 'react-leaflet';

import styles from './dash-map.css';

class DashMap extends Component {
  static propTypes = {
    lat: PropTypes.number.isRequired,
    lon: PropTypes.number.isRequired,
    zoom: PropTypes.number.isRequired,
    articles: PropTypes.array,
    onClickMarker: PropTypes.func
  }

  constructor(props) {
    super(props);
    this.state = {
      jitter: [],
      filters: {}
    }
  }

  setJitter(articles) {
    let jitters = [];
    for (let i = 0; i < articles.length; i++) {
      const jitter = [(Math.random() - 0.5) * .0005, (Math.random() - 0.5) * .0005];
      jitters.push(jitter);
    }
    this.setState({
      jitter: jitters
    });
  }

  setFilter(type, value) {
    return () => {
      let newFilters = this.state.filters;
      newFilters[type] = value;
      this.setState({
        filters: newFilters
      })
    }
  }

  filterData = () => {
    let newData = this.props.articles;
    if (this.state.filters.category) {
      newData = newData.filter((article) => {
        console.log(article.Tags)
        for (let i = 0; i < article.Tags.length; i++) {
          if(article.Tags[i].toUpperCase().indexOf(this.state.filters.category.toUpperCase()) !== -1) {
            return true;
          }
        }
        return false;
      })
    }
    return newData;
  }

  onClickMarker(article) {
    return () => {
      if (this.props.onClickMarker) {
        this.props.onClickMarker(article);
      }
    }
  }

  renderMarkers() {
    const filteredData = this.filterData();
    return (
      <div>
        {filteredData.map((article, i) => {
          if (!Number(article.Lat) || !Number(article.Lon)) { return; }
          const jitteredLat = Number(article.Lat) + this.state.jitter[i][0];
          const jitteredLon = Number(article.Lon) + this.state.jitter[i][1];
          return (
            <div key={article.ID}>
              <CircleMarker onClick={this.onClickMarker(article)} radius={5} center={[jitteredLat, jitteredLon]} stroke={false} color={"#32DCF6"} opacity={0.75}>
                <Popup>
                  <span>
                    <a href={article.URL}>
                      {article.Title}
                    </a>
                  </span>
                </Popup>
              </CircleMarker>
            </div>
          )
        })}
      </div>
    )
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.articles.length && nextProps.articles.length !== this.props.articles.length) {
      this.setJitter(nextProps.articles);
    }
  }
  render() {
    return (
      <div className={styles.container} >
        <div onClick={this.setFilter("category", "crime")}>Filters go here</div>
        <Map className={styles.map} center={[this.props.lat, this.props.lon]} zoom={this.props.zoom} scrollWheelZoom={false}>
          <TileLayer url="https://api.mapbox.com/styles/v1/nguyensomniac/cj1q3lnh9002w2rpipklrlizw/tiles/512/{z}/{x}/{y}?access_token=pk.eyJ1Ijoibmd1eWVuc29tbmlhYyIsImEiOiJjaWZhNjY4OXQxeHgyczRtNzZ4OTVnbHFuIn0.auDKPGYvamGNI0tCmG_6bw"/>
          {this.renderMarkers()}
        </Map>
      </div>
    )
  }
}

// connect component props to Redux global state.
const mapStateToProps = (state) => {
  return {
    articles: state.articleData
  }
}

export default DashMap;
