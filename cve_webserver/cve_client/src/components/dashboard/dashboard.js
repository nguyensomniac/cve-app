import React, { Component } from 'react';
import PropTypes from 'prop-types';
import styles from './dashboard.css';
// import data from './goals.json';
import Modal from 'react-modal';
import { connect } from 'react-redux';

// npm install --save react-modal
// https://github.com/reactjs/react-modal

class DashBoard extends Component {
	  static propTypes = {
	    articles: PropTypes.array,
	  }

	constructor() {

	    super();

	    this.state = {
	      modalIsOpen: false,
	      data: []
	    };

		this.openModal = this.openModal.bind(this);
		this.afterOpenModal = this.afterOpenModal.bind(this);
		this.closeModal = this.closeModal.bind(this);
	}


	openModal() {
		this.setState({modalIsOpen: true});
	}

	afterOpenModal() {
		// references are now sync'd and can be accessed.
		this.subtitle.style.color = '#f00';
	}

	closeModal() {
		this.setState({modalIsOpen: false});
	}


	filterData = (zip) => {
	    let newData = this.props.articles;
	    newData = newData.filter((article) => {
	          if(article.ZIP == zip) {
		            return true;
		      }
		      else {
		        return false;
		      }
	  	})
	    return newData;
	  }

	get_current_percent(goal) {
		return this.get_current_amount(goal) / this.props.articles.length * 100;
	}
	get_current_amount(goal) {
		var zip = 0;
		if (goal.fields["community"] === "Downtown Berkeley") {
			zip = 94704;
		} else if (goal.fields["community"] === "UC Berkeley") {
			zip = 94720
		} else if (goal.fields["community"] === "North Berkeley") {
			zip = 94709;
		} else if (goal.fields["community"] === "South Berkeley") {
			zip = 94703;
		}
		if (zip == 0) {
			return 0;
		}
		var len = this.filterData(zip).length;
		return len;
	}

	format_metric(goal) {
		if (goal.fields["benchmark_metric"] === "percent") {
			return <span> {this.get_current_percent(goal)}% of articles </span>
		} else {
			return <span> {this.get_current_amount(goal)} articles </span>
		}
	}

	format_benchmark(goal) {
		if (goal.fields["benchmark_metric"] === "percent") {
			return <span> {goal.fields["benchmark_goal"]}% </span>
		} else {
			return <span> {goal.fields["benchmark_goal"]} </span>
		}
	}

	compare_metric(goal) {
		var cur_goal;
		if (goal.fields["benchmark_metric"] === "percent") {
			cur_goal = this.get_current_percent(goal);
		} else {
			cur_goal = this.get_current_amount(goal);
		}

		if (cur_goal < goal.fields["benchmark_goal"]) {
			return -1;
		} else {
			return 1;
		}
	}

	handleBenchmark = (e) => {
		if (e.target.value) {
			this.setState({
				benchmarkMetric: e.target.value
			})
		}
	}

	handleGoal = (e) => {
		if (e.target.value) {
			this.setState({
				goal: e.target.value
			})
		}
	}

	handleCommunity = (e) => {
		if (e.target.value) {
			this.setState({
				community: e.target.value
			})
		}
	}
	onSubmit(e) {
		e.preventDefault();
		const goal = () => {
			return {
				"community": this.state.community,
				"benchmark_metric": this.state.benchmarkMetric,
				"benchmark_goal": this.state.goal };
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener("error", function() {alert("error");});
		xhr.open("POST", "/api/submit_goal");
		xhr.setRequestHeader('Content-Type', 'application/json');
		xhr.onreadystatechange = () => {
			if (xhr.readyState === 4) {
				if (xhr.status === 200) {
					window.location.reload();
				} else {
					alert('submit failed');
				}
			}
		}
		xhr.send(JSON.stringify(goal));
	}

	componentWillMount() {
		var get_data = () => {
			var xhr = new XMLHttpRequest();
			xhr.addEventListener("error", function() {alert("error");});
			xhr.open("GET", "/api/get_tile_data", false);
			xhr.setRequestHeader('Content-Type', 'application/json');
			xhr.onreadystatechange = () => {
				if (xhr.readyState === 4) {
							if (xhr.status === 200) {
								 var d = JSON.parse(xhr.responseText);
								 this.setState({
									 data: d
								 });
							} else {
								 alert('data retrieval failed');
							}
				}
			}
			xhr.send();
		}
		get_data();
	}

	renderTilesIfNeeded() {
		if (this.state.data) {
			console.log(this.state.data);
			return (
				<div>
					{this.state.data.map((goal) => {
							var id_string = "entry_" + goal["pk"];
							return (
								<div key={id_string} className={styles.tile}>
									<div className={styles.delete_tile} id={id_string} onClick={this.delete_tile}> X </div>
									This Month: <br/> <div className={styles.indicator}> {this.format_metric(goal)}</div>
									<div className={styles.title}> on {goal.fields["community"]}</div>
									<div className={styles.goal}> benchmark: {this.format_benchmark(goal)}</div>
							</div>
							);
					})}
					<div className={styles.tile}>
					 	<div className={styles.make_new} onClick={this.openModal}>
					 		+ Make a New Watch Tile
					 	</div>
					</div>
				</div>
			)
		}
	}

	delete_tile(e) {
		var d_id = e.target.id.slice(6);
		var datad = {"delete_id": d_id};
		var xhr = new XMLHttpRequest();
		xhr.addEventListener("error", function() {alert("error");});
		xhr.open("POST", "/api/delete_goal");
		xhr.setRequestHeader('Content-Type', 'application/json');
		xhr.onreadystatechange = function() {
			if (xhr.readyState === 4) {
				if (xhr.status === 200) {
					window.location.reload();
				} else {
					alert('delete submit failed');
				}
			}
		}
		xhr.send(JSON.stringify(datad));
	}
	render() {

    	return (
			<div className={styles.container}>
				 {this.renderTilesIfNeeded()}
				 <Modal
			          isOpen={this.state.modalIsOpen}
			          onAfterOpen={this.afterOpenModal}
			          onRequestClose={this.closeModal}
			          className={styles.modal}
			          contentLabel="new_tile"
			        >

			          <h2>Make a new watch tile</h2>
			          <form onSubmit={this.onSubmit}>

			          	<div><b>What community would you like to watch? </b></div>
			          	<table>
			          		<tbody>
				          	<tr>
				          		<td>
				          			Geographic:
				          		</td>
				          		<td>
									<select name="community" id="select_community" onChange={this.handleCommunity}>
									  <option value="North Berkeley">North Berkeley</option>
									  <option value="South Berkeley">South Berkeley</option>
									  <option value="Downtown Berkeley">Downtown Berkeley</option>
									  <option value="UC Berkeley">UC Berkeley</option>
									</select>
								</td>
							</tr>
							<tr>
								<td>
									Demographic:
								</td>
								<td>
									<select name="demographic" id="select_demographic" disabled="disabled">
									  <option value="Hispanic">Hispanic</option>
									  <option value="African-American">African-American</option>
									  <option value="Southeast Asian">Southeast Asian</option>
									  <option value="White">White</option>
									</select>
								</td>
							</tr>
							<tr>
								<td>
									Income:
								</td>
								<td>
									<select name="income" id="select_income" disabled="disabled">
									  <option value="low">  less than 20K/year</option>
									  <option value="med"> 20K-40K/year</option>
									  <option value="high"> greater than 40K/year</option>
									</select>
								</td>
							</tr>
							</tbody>
						</table>
						<br/>
			          	<div> <b>Would you like to set a benchmark? </b></div>
				       <input type="radio" onChange={this.handleBenchmark} name="benchmark" value="percent" id="radio_percent"/> <span className={styles.radio}>Percent of Articles </span>
							 <input type="radio" onChange={this.handleBenchmark} name="benchmark" value="quantity" id="radio_quantity" /> <span className={styles.radio}>Number of Articles </span>
							 <input type="radio" onChange={this.handleBenchmark} name="benchmark" value="none" id="radio_none"/> <span className={styles.radio}> None </span>
						<br/>
							 <input type="radio" onChange={this.handleComparison} disabled="disabled" name="comparison" value="less" id="radio_less" /> <span className={styles.radio}>Less than </span>
							 <input type="radio" onChange={this.handleComparison} disabled="disabled" name="comparison" value="more" id="radio_more" checked/> <span className={styles.radio}> Greater than </span>

							 Amount: <input type="text" onChange={this.handleGoal} name="amount" id="input_amount"/> <br />
 						<br/>
							 <button>Submit</button>
			          </form>
			       </Modal>
			</div>
		)
	}
}

// connect component props to Redux global state.
const mapStateToProps = (state) => {
  return {
    articles: state.articleData
  }
}

export default connect(mapStateToProps)(DashBoard);
