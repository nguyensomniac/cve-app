import React, { Component } from 'react';
// import PropTypes from 'prop-types';
import styles from './dashboard.css';
import data from './goals.json';
import Modal from 'react-modal';

// npm install --save react-modal
// https://github.com/reactjs/react-modal

class DashBoard extends Component {
 
	constructor() {

	    super();

	    this.state = {
	      modalIsOpen: false
	    };

		this.openModal = this.openModal.bind(this);
		this.afterOpenModal = this.afterOpenModal.bind(this);
		this.closeModal = this.closeModal.bind(this);
	}

	openModal() {
		this.setState({modalIsOpen: true});
	}	

	afterOpenModal() {
		// references are now sync'd and can be accessed.
		this.subtitle.style.color = '#f00';
	}

	closeModal() {
		this.setState({modalIsOpen: false});
	}


	render() {
	
		function get_current_percent(goal) {
			return 10;
		}

		function get_current_amount(goal) {
			return 35;
		}

		function format_metric(goal) {
			if (goal["benchmark_metric"] === "percent") {
				return <span> {get_current_percent(goal)}% of articles </span>
			} else {
				return <span> {get_current_amount(goal)} articles </span>
			}
		}

		function compare_metric(goal) {
			var cur_goal;
			if (goal["benchmark_metric"] === "percent") {
				cur_goal = get_current_percent(goal);
			} else {
				cur_goal = get_current_amount(goal);
			}

			if (cur_goal < goal["benchmark_goal"]) {
					return -1;
				} else {
					return 1;
				}
		}

    	function submit(e) {
    		e.preventDefault();
    		var goal =  {
					   "community": e.get("community"),
					   "benchmark_metric": "percent",
					   "benchmark_goal": "12"
					 };
    		save_new_goal(goal);
    	}

    	function save_new_goal(goal) {
    		var xhr = new XMLHttpRequest();
    		xhr.addEventListener("error", function() {alert("error");});
			xhr.open("POST", "/api/submit_goal");
			xhr.setRequestHeader('Content-Type', 'application/json');
			xhr.send(JSON.stringify(goal));
    	}

    	function make_tile(goal) {
    		var indicator;
    		if (compare_metric(goal) < 0) {
    			indicator = styles.low;
    		}  else {
    			indicator = styles.high;
    		}

    		return (
	    		<div className={styles.tile}> 
					This Month: <br/> <div className={indicator}> {format_metric(goal)}</div>
					<div className={styles.title}> on {goal["community"]}</div>
					<div className={styles.goal}> benchmark: {goal["benchmark_goal"]}</div>
				</div>
			)
	    }


        var tiles = data.map(function(goal) {
            return (
            	<div> {make_tile(goal)} </div>
			);
        });

    	return (
			<div className={styles.container}> 
				 {tiles}
				 <div className={styles.tile}>
				 	<div className={styles.make_new} onClick={this.openModal}>
				 		+ Make a New Watch Tile

				 	</div>
				 </div>
				 <Modal
			          isOpen={this.state.modalIsOpen}
			          onAfterOpen={this.afterOpenModal}
			          onRequestClose={this.closeModal}
			          className={styles.modal}
			          contentLabel="new_tile"
			        >

			          <h2>Make a new watch tile</h2>
			          <form onSubmit={submit}>

			          	<div><b>What community would you like to watch? </b></div>
							<select name="community">
							  <option value="north">North Berkeley</option>
							  <option value="south">South Berkeley</option>
							  <option value="downtown">Downtown Berkeley</option>
							  <option value="east">East Berkeley</option>
							</select>
						<br/>
						<br/>
			          	<div> <b>Would you like to set a benchmark? </b></div>
				         	 <input type="radio" name="benchmark" value="percent" /> <span className={styles.radio}>Percent of Articles </span> 
							 <input type="radio" name="benchmark" value="quantity" /> <span className={styles.radio}>Number of Articles </span>
							 <input type="radio" name="benchmark" value="none" /> <span className={styles.radio}> None </span>
						<br/>
							 Amount: <input type="text" name="amount" /> <br />
 						<br/>
							 <button>Submit</button>
			          </form>
			       </Modal>
			</div>
		)
	}
}

export default DashBoard;
