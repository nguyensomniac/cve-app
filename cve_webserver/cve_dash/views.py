import os
from django.http import HttpResponse
from django.conf import settings
from .models import Goal
import json,logging
from django.forms.models import model_to_dict
from django.core import serializers

# Create your views here.

def index(request):
    try:
        with open(os.path.join(settings.REACT_APP_DIR, 'build', 'index.html')) as f:
            return HttpResponse(f.read())
    except FileNotFoundError:
        logging.exception('Production build of app not found')
        return HttpResponse(
            """
            This URL is only used when you have built the production
            version of the app. Visit http://localhost:3000/ instead, or
            run `yarn run build` to test the production version.
            """,
            status=501,
        )

def get_article_data(request):
    berkeleyside_data = open(os.path.join(settings.BASE_DIR, 'cve_dash', 'static/berkeleyside-formatted-data.json'), 'r')
    return HttpResponse(berkeleyside_data.read(), content_type="application/json")

def get_census_data(request):
    census_data = open(os.path.join(settings.BASE_DIR, 'cve_dash', 'static/berkeley-census-data.geojson'), 'r')
    return HttpResponse(census_data.read(), content_type="application/json")

def submit_new_goal(request):
    body_unicode = request.body.decode('utf-8')
    body = json.loads(body_unicode)
    print(body)
    print(body['community'])
    print(body['benchmark_metric'])
    print(body['benchmark_goal'])

    new_goal = Goal.objects.create(community=body['community'], benchmark_metric=body['benchmark_metric'], benchmark_goal=body['benchmark_goal'])
    return HttpResponse(status=200)

def delete_goal(request):
    body_unicode = request.body.decode('utf-8')
    body = json.loads(body_unicode)

    Goal.objects.filter(id = body["delete_id"]).delete()
    return HttpResponse(status=200)


def get_tile_data(request):
    # data = Goal.objects.all()
    data = serializers.serialize("json", Goal.objects.all(), fields=('community','benchmark_goal', 'benchmark_metric'))
    return HttpResponse(data, status=200)
